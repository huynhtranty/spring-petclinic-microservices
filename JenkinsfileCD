pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "hytaty"
        NAMESPACE = "dev-review"
    }
    parameters {
        string(name: 'admin-server', defaultValue: 'main', description: 'Branch to build for admin-server')
        string(name: 'api-gateway', defaultValue: 'main', description: 'Branch to build for api-gateway')
        string(name: 'config-server', defaultValue: 'main', description: 'Branch to build for config-server')
        string(name: 'customer-service', defaultValue: 'main', description: 'Branch to build for customer-service')
        string(name: 'discovery-server', defaultValue: 'main', description: 'Branch to build for discovery-server')
        string(name: 'genai-service', defaultValue: 'main', description: 'Branch to build for generic-service')
        string(name: 'vets-service', defaultValue: 'main', description: 'Branch to build for vets-service')
        string(name: 'visits-service', defaultValue: 'main', description: 'Branch to build for visit-service')
    }

    stages {
        stage('test k8s') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = "${KUBECONFIG_FILE}"
                        sh "kubectl get nodes"
                    }
                }
            }
        }

        stage('Generate and Apply Kubernetes YAMLs') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = "${KUBECONFIG_FILE}"

                        def services = [
                            [name: "spring-petclinic-admin-server",     branch: params['admin-server']],
                            [name: "spring-petclinic-api-gateway",      branch: params['api-gateway']],
                            [name: "spring-petclinic-vets-service",     branch: params['vets-service']],
                            [name: "spring-petclinic-visits-service",   branch: params['visits-service']],
                            [name: "spring-petclinic-customers-service",branch: params['customer-service']],
                            [name: "spring-petclinic-genai-service",    branch: params['genai-service']],
                            [name: "spring-petclinic-config-server",    branch: params['config-server']],
                            [name: "spring-petclinic-discovery-server", branch: params['discovery-server']]
                        ]
                        sh "kubectl get ns ${NAMESPACE} || kubectl create ns ${NAMESPACE}"

                        services.each { svc ->

                            def SERVICE_NAME = svc.name
                            def CONTAINER_NAME = SERVICE_NAME.replaceFirst("spring-petclinic-", "")
                            def BRANCH = svc.branch
                            def commitId = sh(
                                script: "git rev-parse origin/${BRANCH}",
                                returnStdout: true
                            ).trim()

                            def IMAGE_TAG = (BRANCH != 'main') ? commitId.take(7) : 'latest'
                            def CONTAINER_PORT = guessPortFromServiceName(SERVICE_NAME)
                            
                            echo "Deploying service: ${svc.name} on branch ${svc.branch}"
                            echo "tag: ${IMAGE_TAG}" 

                            withEnv([
                                "SERVICE_NAME=${SERVICE_NAME}",
                                "CONTAINER_NAME=${CONTAINER_NAME}",
                                "IMAGE_TAG=${IMAGE_TAG}",
                                "CONTAINER_PORT=${CONTAINER_PORT}",
                                "NAMESPACE=${env.NAMESPACE}"
                            ]) {
                                sh """
                                envsubst < k8s/deployment.tpl.yaml > ${SERVICE_NAME}-deployment.yaml
                                envsubst < k8s/service.tpl.yaml > ${SERVICE_NAME}-service.yaml

                                kubectl apply -f ${SERVICE_NAME}-deployment.yaml -n ${NAMESPACE}
                                kubectl apply -f ${SERVICE_NAME}-service.yaml -n ${NAMESPACE}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Show Access Info') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = "${KUBECONFIG_FILE}" // Đảm bảo biến KUBECONFIG được đặt

                        // Lấy IP Public của node (master node)
                        def nodeExternalIP = sh(
                            script: "kubectl get node k8s-master -o jsonpath='{.status.addresses[?(@.type==\"ExternalIP\")].address}'",
                            returnStdout: true,
                            returnStatus: true
                        )
                        def output = nodeExternalIP.stdout.trim()
                        def status = nodeExternalIP.status

                        if (status != 0 || output.isEmpty()) {
                            echo "Warning: Could not determine an ExternalIP for 'k8s-master' node. Access might be limited. Make sure your master node has a public IP."
                            nodeExternalIP = "20.6.92.216"
                        } else {
                            nodeExternalIP = output
                        }

                        if (!nodeExternalIP) {
                            echo "Warning: Could not determine an ExternalIP for any node. Access might be limited."
                            nodeExternalIP = "YOUR_PUBLIC_IP_HERE" // Fallback hoặc hướng dẫn thủ công
                        }

                        def services = [
                            [name: "admin-server",     branch: params['admin-server']],
                            [name: "api-gateway",      branch: params['api-gateway']],
                            [name: "vets-service",     branch: params['vets-service']],
                            [name: "visits-service",   branch: params['visits-service']],
                            [name: "customers-service",branch: params['customer-service']],
                            [name: "genai-service",    branch: params['genai-service']],
                            [name: "config-server",    branch: params['config-server']],
                            [name: "discovery-server", branch: params['discovery-server']]
                        ]

                        services.each { svc ->
                            def svcName = svc.name
                            def nodePort = sh(
                                script: "kubectl get svc ${svcName} -n ${NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'", // Sử dụng env.NAMESPACE
                                returnStdout: true
                            ).trim()

                            echo "${svcName} is accessible at: http://${nodeExternalIP}:${nodePort}"
                            echo "→ Add to /etc/hosts: ${nodeExternalIP}    ${svcName}.local (Only if you are running DNS locally or manually editing hosts file for internal access)"
                        }
                    }
                }       
            }
        }
    }
}

def guessPortFromServiceName(name) {
    if (name.contains("admin")) return "9090"
    if (name.contains("gateway")) return "8080"
    if (name.contains("vets")) return "8081"
    if (name.contains("visits")) return "8082"
    if (name.contains("customers")) return "8083"
    if (name.contains("genai")) return "8084"
    if (name.contains("config")) return "8888"
    if (name.contains("discovery")) return "8761"
    return "8080" // default fallback
}